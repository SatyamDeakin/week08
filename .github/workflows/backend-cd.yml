name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'aks-demo'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'rg-aks-demo'
      namespace:
        description: 'Kubernetes namespace (dev or prod)'
        required: true
        default: 'dev'

      # --- App Deployment + container names (avoid grepping) ---
      product_deploy_name:
        description: 'Deployment name for product API'
        required: true
        default: 'product-service-w08e1'
      product_container_name:
        description: 'Container name inside product deployment'
        required: true
        default: 'product-service'

      order_deploy_name:
        description: 'Deployment name for order API'
        required: true
        default: 'order-service-w08e1'
      order_container_name:
        description: 'Container name inside order deployment'
        required: true
        default: 'order-service'

      # --- Service names used to fetch LB IPs ---
      product_service_name:
        description: 'Service name for product API'
        required: true
        default: 'product-service-w08e1'
      order_service_name:
        description: 'Service name for order API'
        required: true
        default: 'order-service-w08e1'

      # Pin app images to this commitâ€™s tag
      set_images:
        description: 'Set app Deployment images to ACR images for this commit? (true/false)'
        required: true
        default: 'true'

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} # e.g. mystudentregistry.azurecr.io

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_URL: ${{ steps.make_outputs.outputs.product_url }}
      ORDER_API_URL:   ${{ steps.make_outputs.outputs.order_url }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name:   ${{ inputs.aks_cluster_name }}

      - name: Ensure namespace exists
        run: |
          kubectl get ns "${{ inputs.namespace }}" || kubectl create ns "${{ inputs.namespace }}"

      - name: Apply backend infrastructure (ConfigMaps/Secrets/DBs)
        run: |
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/configmaps.yaml
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/secrets.yaml
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/product-db.yaml
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/order-db.yaml

      - name: Apply backend services (Deployments/Services)
        run: |
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/product-service.yaml
          kubectl -n "${{ inputs.namespace }}" apply -f k8s/order-service.yaml

      # --- Set images ONLY for the app deployments (never DB) ---
      - name: Set images to this commit (apps only, if requested)
        if: ${{ inputs.set_images == 'true' }}
        run: |
          IMG_PROD="${{ env.ACR_LOGIN_SERVER }}/product_service:${{ github.sha }}"
          IMG_ORDER="${{ env.ACR_LOGIN_SERVER }}/order_service:${{ github.sha }}"

          echo "Setting ${{ inputs.product_deploy_name }}/${{ inputs.product_container_name }} -> $IMG_PROD"
          kubectl -n "${{ inputs.namespace }}" set image \
            deploy/${{ inputs.product_deploy_name }} \
            ${{ inputs.product_container_name }}="$IMG_PROD"

          echo "Setting ${{ inputs.order_deploy_name }}/${{ inputs.order_container_name }} -> $IMG_ORDER"
          kubectl -n "${{ inputs.namespace }}" set image \
            deploy/${{ inputs.order_deploy_name }} \
            ${{ inputs.order_container_name }}="$IMG_ORDER"

          kubectl -n "${{ inputs.namespace }}" rollout status deploy/${{ inputs.product_deploy_name }} --timeout=300s
          kubectl -n "${{ inputs.namespace }}" rollout status deploy/${{ inputs.order_deploy_name }}   --timeout=300s

      - name: Ensure Services are type LoadBalancer
        run: |
          kubectl -n "${{ inputs.namespace }}" patch svc "${{ inputs.product_service_name }}" -p '{"spec":{"type":"LoadBalancer"}}' --type=merge || true
          kubectl -n "${{ inputs.namespace }}" patch svc "${{ inputs.order_service_name }}"   -p '{"spec":{"type":"LoadBalancer"}}' --type=merge || true

      - name: Wait for LoadBalancer IPs/hostnames (up to 5 min)
        id: wait_ips
        shell: bash
        run: |
          NS="${{ inputs.namespace }}"
          PSVC="${{ inputs.product_service_name }}"
          OSVC="${{ inputs.order_service_name }}"

          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            P_IP=$(kubectl -n "$NS" get svc "$PSVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            O_IP=$(kubectl -n "$NS" get svc "$OSVC" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            P_HOST=$(kubectl -n "$NS" get svc "$PSVC" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            O_HOST=$(kubectl -n "$NS" get svc "$OSVC" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

            [ -z "$P_IP" ] && P_IP="$P_HOST"
            [ -z "$O_IP" ] && O_IP="$O_HOST"

            if [[ -n "$P_IP" && -n "$O_IP" ]]; then
              echo "P_ADDR=$P_IP" >> $GITHUB_ENV
              echo "O_ADDR=$O_IP" >> $GITHUB_ENV
              echo "Product: $P_IP"
              echo "Order:   $O_IP"
              exit 0
            fi
            sleep 5
          done

          echo "LoadBalancer addresses not ready after timeout."
          kubectl -n "$NS" get svc
          exit 1

      - name: Build service URLs & expose as outputs
        id: make_outputs
        shell: bash
        run: |
          P_URL="http://${P_ADDR}:8000"
          O_URL="http://${O_ADDR}:8001"
          echo "product_url=$P_URL" >> $GITHUB_OUTPUT
          echo "order_url=$O_URL"   >> $GITHUB_OUTPUT
          echo "Product API URL: $P_URL"
          echo "Order   API URL: $O_URL"

      - name: Azure logout
        if: always()
        run: az logout
