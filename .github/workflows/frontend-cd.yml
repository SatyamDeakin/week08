# week08/.github/workflows/frontend-cd.yml
name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External URL of Product Service'
        required: true
        default: 'http://4.147.242.227:8000'
      order_api_ip:
        description: 'External URL of Order Service'
        required: true
        default: 'http://4.237.229.66:8001'
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'aks-demo'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'rg-aks-demo'

  push:
    branches: [ development, main ]
    paths:
      - 'frontend/**'
      - 'k8s/frontend.yaml'
      - '.github/workflows/frontend-cd.yml'

env:
  # dev on development, prod on main
  ENV_NAME:  ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
  NAMESPACE: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
  ACR_NAME:         ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE:            ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest

    # Use only github.* context here
    environment:
      name: ${{ github.event_name == 'push'
                && (github.ref_name == 'main' && 'prod' || 'dev')
                || 'Production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure login with Service Principal (no OIDC)
      - name: Azure Login (service principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Inject Backend URLs into main.js
        shell: bash
        run: |
          PROD_URL="${{ inputs.product_api_ip }}"
          ORDER_URL="${{ inputs.order_api_ip }}"
          # If running on push (no inputs), keep placeholders or set fallbacks
          if [ -z "$PROD_URL" ]; then PROD_URL="http://example.product:8000"; fi
          if [ -z "$ORDER_URL" ]; then ORDER_URL="http://example.order:8001"; fi
          sed -i "s|_PRODUCT_API_URL_|$PROD_URL|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|$ORDER_URL|g"  frontend/main.js

      - name: Build and Push Frontend Image
        working-directory: ./frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest .
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ${{ env.IMAGE }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          docker push ${{ env.IMAGE }}

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ inputs.aks_resource_group || secrets.AKS_RESOURCE_GROUP }}
          cluster-name:   ${{ inputs.aks_cluster_name   || secrets.AKS_CLUSTER_NAME }}

      - name: Ensure namespace exists
        run: |
          kubectl get ns "${{ env.NAMESPACE }}" || kubectl create ns "${{ env.NAMESPACE }}"

      - name: Apply manifest
        run: kubectl -n "${{ env.NAMESPACE }}" apply -f k8s/frontend.yaml

      # âœ… Correct image update: detect the container name and set it
      - name: Set image & rollout
        shell: bash
        run: |
          CNAME=$(kubectl -n "${{ env.NAMESPACE }}" get deploy frontend -o jsonpath='{.spec.template.spec.containers[0].name}')
          echo "Updating container '$CNAME' in deployment 'frontend' to image '${{ env.IMAGE }}'"
          kubectl -n "${{ env.NAMESPACE }}" set image deploy/frontend "$CNAME=${{ env.IMAGE }}"
          kubectl -n "${{ env.NAMESPACE }}" rollout status deploy/frontend --timeout=300s

      - name: Azure logout
        if: always()
        run: az logout
