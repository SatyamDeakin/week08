# week08/.github/workflows/backend_ci.yml
name: Backend CI - Test, Build & Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ development, main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # e.g. satyamstudentregistry.azurecr.io and satyamstudentregistry
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME:         ${{ secrets.ACR_NAME }}
  BRANCH:           ${{ github.ref_name }}
  SHA:              ${{ github.sha }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: [ "5432:5432" ]
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s --health-timeout 5s --health-retries 5
        ports: [ "5433:5432" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install deps
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx
      - name: Test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q
      - name: Test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

  build_and_push_images:
    needs: test_and_lint_backends
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # âœ… Login with service principal secret (no OIDC)
      - name: Azure Login (service principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Build & push product_service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.BRANCH }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.SHA }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.BRANCH }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.SHA }}

      - name: Build & push order_service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.BRANCH }}
          docker tag  ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.SHA }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.BRANCH }}
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.SHA }}

      - name: Logout
        if: always()
        run: az logout
